// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: AnalizadorLexico.flex

/* Sección de declaraciones de JFlex */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AnalizadorLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100"+
    "\1\u5500\17\u1f00\2\u3b00\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800"+
    "\2\u1f00\1\u5900\1\u5a00\27\u3b00\1\u5b00\2\u3b00\1\u5c00\45\u1f00"+
    "\1\u5d00\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\11\u1f00\1\u6700\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\4\u1f00\1\u6b00\21\u1f00\246\u0100\1\u6c00"+
    "\20\u0100\1\u6d00\1\u6e00\25\u3b00\1\u6f00\34\u3b00\1\u7000\14\u1f00"+
    "\2\u0100\1\u7100\u0b05\u1f00\1\u7200\1\u7300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\16\0\4\1\1\5"+
    "\1\1\1\6\1\7\1\0\3\1\2\10\2\7\1\10"+
    "\1\11\1\12\1\13\12\14\1\15\1\10\1\7\1\16"+
    "\1\7\2\1\1\17\1\20\3\17\1\21\2\17\1\22"+
    "\6\17\1\23\3\17\1\24\6\17\4\1\1\25\1\1"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\17\1\37\1\17\1\40\1\41\1\42\1\17"+
    "\1\43\1\44\1\45\1\46\1\17\1\47\1\17\1\50"+
    "\1\17\4\1\6\0\1\51\32\0\2\1\4\0\4\1"+
    "\1\17\2\1\1\0\7\1\1\17\4\1\1\17\5\1"+
    "\27\17\1\1\37\17\1\1\u01ca\17\4\1\14\17\16\1"+
    "\5\17\7\1\1\17\1\1\1\17\21\1\160\0\5\17"+
    "\1\1\2\17\2\1\4\17\1\1\1\52\6\1\1\17"+
    "\1\1\3\17\1\1\1\17\1\1\24\17\1\1\123\17"+
    "\1\1\213\17\1\1\5\0\2\1\236\17\10\52\1\1"+
    "\46\17\2\1\1\17\6\1\1\52\47\17\1\52\6\1"+
    "\1\0\1\1\55\0\1\1\1\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\10\1\33\17\4\1\1\52\3\17"+
    "\15\1\5\0\6\1\1\0\4\1\13\0\5\1\53\17"+
    "\25\0\12\14\4\1\2\17\1\0\143\17\1\1\1\17"+
    "\10\0\1\1\6\0\2\17\2\0\1\1\4\0\2\17"+
    "\12\14\3\17\2\1\1\17\17\1\1\0\1\17\1\0"+
    "\36\17\33\0\2\1\131\17\13\0\1\17\16\1\12\14"+
    "\41\17\11\0\2\17\4\1\1\17\5\1\26\17\4\0"+
    "\1\17\11\0\1\17\3\0\1\17\5\0\22\1\31\17"+
    "\3\0\4\1\13\52\65\1\1\17\1\52\13\17\10\52"+
    "\1\1\10\52\46\1\33\0\1\1\4\0\66\17\3\0"+
    "\1\17\22\0\1\17\7\0\12\17\2\0\2\1\12\14"+
    "\1\1\7\17\1\52\7\17\1\52\3\0\1\1\10\17"+
    "\2\1\2\17\2\1\26\17\1\1\7\17\1\1\1\17"+
    "\3\1\4\17\2\1\1\0\1\17\7\0\2\1\2\0"+
    "\2\1\3\0\1\17\10\1\1\0\4\1\2\17\1\1"+
    "\3\17\2\0\2\1\12\14\2\17\2\0\7\1\1\0"+
    "\1\52\4\1\3\0\1\1\6\17\4\1\2\17\2\1"+
    "\26\17\1\1\7\17\1\1\2\17\1\1\2\17\1\1"+
    "\2\17\2\1\1\0\1\1\5\0\4\1\2\0\2\1"+
    "\3\0\3\1\1\0\7\1\4\17\1\1\1\17\7\1"+
    "\12\14\2\0\3\17\1\0\13\1\3\0\1\1\11\17"+
    "\1\1\3\17\1\1\26\17\1\1\7\17\1\1\2\17"+
    "\1\1\5\17\2\1\1\0\1\17\10\0\1\1\3\0"+
    "\1\1\3\0\2\1\1\17\17\1\2\17\2\0\2\1"+
    "\12\14\1\1\1\0\7\1\1\52\7\1\3\0\1\1"+
    "\10\17\2\1\2\17\2\1\26\17\1\1\7\17\1\1"+
    "\2\17\1\1\5\17\2\1\1\0\1\17\7\0\2\1"+
    "\2\0\2\1\3\0\10\1\2\0\4\1\2\17\1\1"+
    "\3\17\2\0\2\1\12\14\1\1\1\17\20\1\1\0"+
    "\1\17\1\1\6\17\3\1\3\17\1\1\4\17\3\1"+
    "\2\17\1\1\1\17\1\1\2\17\3\1\2\17\3\1"+
    "\3\17\3\1\14\17\4\1\5\0\3\1\3\0\1\1"+
    "\4\0\2\1\1\17\6\1\1\0\16\1\12\14\11\1"+
    "\1\0\7\1\3\0\1\1\10\17\1\1\3\17\1\1"+
    "\27\17\1\1\12\17\1\52\5\17\3\1\1\17\7\0"+
    "\1\1\3\0\1\1\4\0\7\1\2\0\1\1\2\17"+
    "\1\52\5\1\2\17\2\0\2\1\12\14\20\1\1\52"+
    "\1\1\2\0\1\1\10\17\1\1\3\17\1\1\27\17"+
    "\1\1\12\17\1\1\5\17\2\1\1\0\1\17\7\0"+
    "\1\1\3\0\1\1\4\0\7\1\2\0\7\1\1\17"+
    "\1\1\2\17\2\0\2\1\12\14\1\1\2\17\17\1"+
    "\2\0\1\1\10\17\1\1\3\17\1\1\51\17\2\1"+
    "\1\17\7\0\1\1\3\0\1\1\4\0\1\17\5\1"+
    "\3\52\1\0\7\1\1\52\2\17\2\0\2\1\12\14"+
    "\12\1\6\17\2\1\2\0\1\1\22\17\3\1\30\17"+
    "\1\1\11\17\1\1\1\17\2\1\7\17\3\1\1\0"+
    "\4\1\6\0\1\1\1\0\1\1\10\0\6\1\12\53"+
    "\2\1\2\0\15\1\60\17\1\0\2\17\7\0\4\1"+
    "\1\0\7\17\10\0\1\1\12\14\47\1\2\17\1\1"+
    "\1\17\1\1\1\52\2\17\1\52\1\17\1\1\1\52"+
    "\1\17\6\52\4\17\1\52\7\17\1\52\3\17\1\1"+
    "\1\17\1\1\1\17\2\52\2\17\1\52\4\17\1\0"+
    "\2\17\6\0\1\1\2\0\1\17\2\1\5\17\1\1"+
    "\1\17\1\1\6\0\2\1\12\14\2\1\4\17\40\1"+
    "\1\17\27\1\2\0\6\1\12\14\13\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\2\0\10\17\1\1\44\17"+
    "\4\1\24\0\1\1\2\0\5\17\13\0\1\1\44\0"+
    "\11\1\1\0\71\1\53\17\24\0\1\17\12\14\6\1"+
    "\6\17\4\0\4\17\3\0\1\17\3\0\2\17\7\0"+
    "\3\17\4\0\15\17\14\0\1\17\1\0\12\14\4\0"+
    "\2\1\46\17\1\1\1\17\5\1\1\17\2\1\53\17"+
    "\1\1\115\17\1\1\4\17\2\1\7\17\1\1\1\17"+
    "\1\1\4\17\2\1\51\17\1\1\4\17\2\1\41\17"+
    "\1\1\4\17\2\1\7\17\1\1\1\17\1\1\4\17"+
    "\2\1\17\17\1\1\71\17\1\1\4\17\2\1\103\17"+
    "\2\1\3\0\40\1\20\17\20\1\125\17\1\52\2\1"+
    "\6\52\3\1\u016c\17\2\1\21\17\1\1\32\17\5\1"+
    "\113\17\3\1\3\0\10\52\7\1\15\17\1\1\4\17"+
    "\3\0\13\1\22\17\3\0\13\1\22\17\2\0\14\1"+
    "\15\17\1\1\3\17\1\1\2\0\14\1\64\17\40\0"+
    "\3\1\1\17\3\1\1\0\1\17\1\0\2\1\12\14"+
    "\41\1\3\0\2\1\12\14\6\1\130\17\1\52\7\1"+
    "\5\17\2\0\42\17\1\0\1\17\5\1\106\17\12\1"+
    "\35\17\2\52\1\1\14\0\4\1\14\0\12\1\12\14"+
    "\36\17\2\1\5\17\13\1\54\17\4\1\32\17\6\1"+
    "\12\14\46\1\27\17\5\0\4\1\65\17\12\0\1\1"+
    "\35\0\2\1\1\0\12\14\6\1\12\14\15\1\1\17"+
    "\130\1\5\0\57\17\21\0\7\17\4\1\12\14\21\1"+
    "\11\0\14\1\3\0\36\17\15\0\2\17\12\14\54\17"+
    "\16\0\14\1\44\17\24\0\10\1\12\14\3\1\3\17"+
    "\12\14\44\17\2\1\11\52\7\1\53\52\2\1\3\52"+
    "\20\1\3\0\1\1\25\0\4\17\1\0\6\17\1\0"+
    "\2\17\3\1\1\52\5\1\300\17\47\0\25\1\4\0"+
    "\26\17\2\1\6\17\2\1\46\17\2\1\6\17\2\1"+
    "\10\17\1\1\1\17\1\1\1\17\1\1\1\17\1\1"+
    "\37\17\2\1\65\17\1\1\7\17\1\1\1\17\3\1"+
    "\3\17\1\1\7\17\3\1\4\17\2\1\6\17\4\1"+
    "\15\17\5\1\3\17\1\1\7\17\16\1\5\0\30\1"+
    "\2\3\5\0\20\1\2\0\23\1\1\0\13\1\5\0"+
    "\5\1\6\0\1\1\1\17\15\1\1\17\20\1\15\17"+
    "\3\1\33\0\25\1\15\0\4\1\1\0\3\1\14\0"+
    "\21\1\1\17\4\1\1\17\2\1\12\17\1\1\1\17"+
    "\3\1\5\17\6\1\1\17\1\1\1\17\1\1\1\17"+
    "\1\1\4\17\1\1\13\17\2\1\4\17\5\1\5\17"+
    "\4\1\1\17\21\1\43\0\2\17\4\0\u0177\1\57\17"+
    "\1\1\57\17\1\1\205\17\6\1\4\17\3\0\2\17"+
    "\14\1\46\17\1\1\1\17\5\1\1\17\2\1\70\17"+
    "\7\1\1\17\17\1\1\0\27\17\11\1\7\17\1\1"+
    "\7\17\1\1\7\17\1\1\7\17\1\1\7\17\1\1"+
    "\7\17\1\1\7\17\1\1\7\17\1\1\40\0\57\1"+
    "\1\17\325\1\2\17\1\0\31\1\17\0\1\1\5\17"+
    "\2\1\3\0\2\17\4\1\126\17\2\1\2\0\2\1"+
    "\3\17\1\1\132\17\1\1\4\17\5\1\51\17\2\52"+
    "\1\1\136\17\21\1\33\17\65\1\306\17\112\1\315\17"+
    "\43\52\20\1\215\17\103\1\56\17\2\1\15\17\3\1"+
    "\20\17\12\14\2\17\24\1\57\17\1\0\4\1\12\0"+
    "\1\1\31\17\6\52\1\1\1\0\106\17\14\0\45\1"+
    "\11\17\2\1\147\17\2\1\4\17\1\52\4\17\14\52"+
    "\13\17\25\52\2\1\5\52\60\1\1\52\12\17\1\0"+
    "\3\17\1\0\4\17\1\0\27\17\5\0\20\1\1\0"+
    "\7\1\64\17\14\1\2\0\62\17\21\0\13\1\12\14"+
    "\6\1\22\0\6\17\3\1\1\17\1\1\2\52\1\1"+
    "\12\14\34\17\10\0\2\1\27\17\15\0\14\1\35\17"+
    "\3\1\4\0\57\17\16\0\16\1\1\17\12\14\6\1"+
    "\5\52\1\1\12\52\12\53\5\52\1\1\51\17\16\0"+
    "\11\1\3\17\1\0\10\17\2\0\2\1\12\14\6\1"+
    "\27\17\3\1\1\17\1\0\2\1\2\52\60\17\1\0"+
    "\1\17\3\0\2\17\2\0\5\17\2\0\1\17\1\0"+
    "\1\17\30\1\3\17\2\1\13\17\5\0\2\1\3\17"+
    "\2\0\12\1\6\17\2\1\6\17\2\1\6\17\11\1"+
    "\7\17\1\1\7\17\1\1\53\52\1\1\14\52\10\1"+
    "\120\52\43\17\10\0\1\1\2\0\2\1\12\14\6\1"+
    "\244\17\14\1\27\17\4\1\61\17\4\1\u0100\3\156\17"+
    "\2\1\152\17\46\1\7\17\14\1\5\17\5\1\1\17"+
    "\1\0\12\17\1\1\15\17\1\1\5\17\1\1\1\17"+
    "\1\1\2\17\1\1\2\17\1\1\154\17\41\1\153\17"+
    "\22\1\100\17\2\1\66\17\50\1\14\17\1\0\3\1"+
    "\20\0\20\1\7\0\14\1\2\0\30\1\3\0\31\1"+
    "\1\0\6\1\5\17\1\1\207\17\2\1\1\0\4\1"+
    "\1\0\13\1\12\14\7\1\32\17\4\1\1\0\1\1"+
    "\32\17\13\1\131\17\3\1\6\17\2\1\6\17\2\1"+
    "\6\17\2\1\3\17\3\1\2\0\3\1\2\0\22\1"+
    "\3\0\4\1\14\17\1\1\32\17\1\1\23\17\1\1"+
    "\2\17\1\1\17\17\2\1\16\17\42\1\173\17\105\1"+
    "\65\0\210\1\1\0\202\1\35\17\3\1\61\17\57\1"+
    "\37\17\1\52\15\1\3\52\21\17\1\0\10\17\1\0"+
    "\5\1\46\52\12\1\36\17\2\1\44\17\4\1\10\17"+
    "\1\1\5\0\52\1\236\17\2\1\12\14\6\1\44\52"+
    "\4\1\44\52\4\1\50\52\10\1\64\52\234\1\u0137\52"+
    "\11\1\26\52\12\1\10\52\230\1\6\17\2\1\1\17"+
    "\1\1\54\17\1\1\2\17\3\1\1\17\2\1\27\17"+
    "\12\1\27\52\11\1\37\52\101\1\23\52\1\1\2\52"+
    "\12\1\26\17\12\1\32\17\106\1\70\17\6\1\2\17"+
    "\100\1\1\17\3\0\1\1\2\0\5\1\4\0\4\17"+
    "\1\1\3\17\1\1\33\17\2\52\2\1\3\0\4\1"+
    "\1\0\40\1\35\17\3\1\35\52\43\1\10\52\1\1"+
    "\34\52\33\1\66\17\12\1\26\17\12\1\23\17\15\1"+
    "\22\52\156\1\111\17\67\1\63\52\15\1\63\52\15\1"+
    "\44\52\14\1\12\53\306\1\35\52\12\1\1\52\10\1"+
    "\26\52\232\1\27\52\11\1\3\0\65\17\17\0\37\1"+
    "\12\14\20\1\3\0\55\17\13\0\2\1\1\0\22\1"+
    "\31\17\7\1\12\14\6\1\3\0\44\17\16\0\1\1"+
    "\12\14\4\1\1\52\13\1\43\52\3\1\1\52\11\1"+
    "\3\0\60\17\16\0\4\17\13\1\12\14\1\52\1\1"+
    "\1\52\43\1\22\52\1\1\31\52\124\1\7\52\1\1"+
    "\1\52\1\1\4\52\1\1\17\52\1\1\12\52\7\1"+
    "\57\52\21\1\12\53\13\1\10\52\2\1\2\52\2\1"+
    "\26\52\1\1\7\52\1\1\2\52\1\1\5\52\3\1"+
    "\1\52\22\1\1\52\14\1\5\52\236\1\65\52\22\1"+
    "\4\52\5\1\12\53\5\1\1\52\40\1\60\52\24\1"+
    "\2\52\1\1\1\52\10\1\12\53\246\1\57\52\51\1"+
    "\4\52\44\1\60\52\24\1\1\52\13\1\12\53\46\1"+
    "\53\17\15\0\1\52\7\1\12\14\66\1\33\52\25\1"+
    "\12\53\306\1\54\52\164\1\100\52\12\53\25\1\1\52"+
    "\240\1\10\52\2\1\47\52\20\1\1\52\1\1\1\52"+
    "\34\1\1\52\12\1\50\52\7\1\1\52\25\1\1\52"+
    "\13\1\56\52\23\1\1\52\42\1\71\52\7\1\11\52"+
    "\1\1\45\52\21\1\1\52\17\1\12\53\30\1\36\52"+
    "\160\1\7\52\1\1\2\52\1\1\46\52\25\1\1\52"+
    "\11\1\12\53\6\1\6\52\1\1\2\52\1\1\40\52"+
    "\16\1\1\52\7\1\12\53\u0136\1\23\52\15\1\157\17"+
    "\53\52\146\1\143\0\35\1\304\52\274\1\57\17\321\1"+
    "\107\52\271\1\71\17\7\1\37\52\1\1\12\53\146\1"+
    "\36\52\22\1\60\52\20\1\4\52\14\1\12\53\11\1"+
    "\25\52\5\1\23\52\260\1\100\52\200\1\105\17\6\52"+
    "\5\1\1\17\56\0\20\1\4\0\15\17\100\1\2\52"+
    "\1\1\1\52\34\1\370\52\10\1\363\52\15\1\2\17"+
    "\u011d\52\61\1\3\52\21\1\4\52\10\1\u018c\52\4\1"+
    "\153\52\5\1\15\52\3\1\11\52\7\1\12\52\313\1"+
    "\5\0\3\1\26\0\2\1\7\0\36\1\4\0\224\1"+
    "\3\0\273\1\125\17\1\1\107\17\1\1\2\17\2\1"+
    "\1\17\2\1\2\17\2\1\4\17\1\1\14\17\1\1"+
    "\1\17\1\1\7\17\1\1\101\17\1\1\4\17\2\1"+
    "\10\17\1\1\7\17\1\1\34\17\1\1\4\17\1\1"+
    "\5\17\1\1\1\17\3\1\7\17\1\1\u0154\17\2\1"+
    "\31\17\1\1\31\17\1\1\37\17\1\1\31\17\1\1"+
    "\37\17\1\1\31\17\1\1\37\17\1\1\31\17\1\1"+
    "\37\17\1\1\31\17\1\1\10\17\2\1\62\14\55\52"+
    "\12\1\7\52\2\1\12\53\4\1\1\52\u0171\1\54\52"+
    "\4\1\12\53\6\1\305\52\73\1\104\52\7\1\1\52"+
    "\4\1\12\53\246\1\4\17\1\1\33\17\1\1\2\17"+
    "\1\1\1\17\2\1\1\17\1\1\12\17\1\1\4\17"+
    "\1\1\1\17\1\1\1\17\6\1\1\17\4\1\1\17"+
    "\1\1\1\17\1\1\1\17\1\1\3\17\1\1\2\17"+
    "\1\1\1\17\2\1\1\17\1\1\1\17\1\1\1\17"+
    "\1\1\1\17\1\1\1\17\1\1\2\17\1\1\1\17"+
    "\2\1\4\17\1\1\7\17\1\1\4\17\1\1\4\17"+
    "\1\1\1\17\1\1\12\17\1\1\21\17\5\1\3\17"+
    "\1\1\5\17\1\1\21\17\104\1\327\17\51\1\65\17"+
    "\13\1\336\17\2\1\u0182\52\16\1\u0131\52\37\1\36\17"+
    "\343\1\1\0\36\1\140\0\200\1\360\0\20\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\2\3\3\1\4\1\2"+
    "\1\0\22\5\1\0\1\6\14\5\1\7\7\5\1\10"+
    "\42\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\54\0\54\0\260\0\334"+
    "\0\u0108\0\u0134\0\u0108\0\u0108\0\u0160\0\u018c\0\u01b8\0\u01e4"+
    "\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344"+
    "\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4"+
    "\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u06b4\0\u0160\0\u06e0\0\u070c\0\u0738"+
    "\0\u0764\0\u0790\0\u07bc\0\u07e8\0\54\0\u0814\0\u0840\0\u086c"+
    "\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc"+
    "\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c"+
    "\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\0\1\2\1\0\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\0\1\23\1\24\1\25"+
    "\1\15\1\26\1\27\2\15\1\30\1\31\1\15\1\32"+
    "\1\33\1\34\1\15\1\35\1\15\1\36\1\15\1\0"+
    "\1\15\1\12\56\0\1\2\51\0\2\37\3\0\44\37"+
    "\1\0\2\37\11\0\1\40\42\0\2\6\3\0\44\6"+
    "\1\0\2\6\16\0\1\5\51\0\1\12\36\0\1\12"+
    "\1\15\13\0\1\15\2\0\33\15\2\0\1\15\13\0"+
    "\1\15\2\0\22\15\1\41\10\15\2\0\1\15\13\0"+
    "\1\15\2\0\7\15\1\42\23\15\2\0\1\15\13\0"+
    "\1\15\2\0\21\15\1\43\11\15\2\0\1\15\13\0"+
    "\1\15\2\0\27\15\1\44\3\15\2\0\1\15\13\0"+
    "\1\15\2\0\24\15\1\45\6\15\2\0\1\15\13\0"+
    "\1\15\2\0\21\15\1\46\2\15\1\47\6\15\2\0"+
    "\1\15\13\0\1\15\2\0\13\15\1\50\17\15\2\0"+
    "\1\15\13\0\1\15\2\0\22\15\1\51\10\15\2\0"+
    "\1\15\13\0\1\15\2\0\20\15\1\52\1\46\11\15"+
    "\2\0\1\15\13\0\1\15\2\0\22\15\1\53\4\15"+
    "\1\54\3\15\2\0\1\15\13\0\1\15\2\0\14\15"+
    "\1\55\4\15\1\55\3\15\1\55\5\15\2\0\1\15"+
    "\13\0\1\15\2\0\22\15\1\56\10\15\2\0\1\15"+
    "\13\0\1\15\2\0\14\15\1\55\7\15\1\55\2\15"+
    "\1\57\3\15\2\0\1\15\13\0\1\15\2\0\24\15"+
    "\1\60\6\15\2\0\1\15\13\0\1\15\2\0\13\15"+
    "\1\61\17\15\2\0\1\15\13\0\1\15\2\0\16\15"+
    "\1\62\12\15\1\63\1\15\2\0\1\15\13\0\1\15"+
    "\2\0\16\15\1\64\14\15\2\0\6\37\1\65\45\37"+
    "\2\40\3\0\44\40\1\0\2\40\1\15\13\0\1\15"+
    "\2\0\22\15\1\66\10\15\2\0\1\15\13\0\1\15"+
    "\2\0\20\15\1\52\12\15\2\0\1\15\13\0\1\15"+
    "\2\0\26\15\1\67\4\15\2\0\1\15\13\0\1\15"+
    "\2\0\26\15\1\70\4\15\2\0\1\15\13\0\1\15"+
    "\2\0\27\15\1\71\3\15\2\0\1\15\13\0\1\15"+
    "\2\0\12\15\1\55\20\15\2\0\1\15\13\0\1\15"+
    "\2\0\24\15\1\72\6\15\2\0\1\15\13\0\1\15"+
    "\2\0\15\15\1\73\15\15\2\0\1\15\13\0\1\15"+
    "\2\0\21\15\1\74\11\15\2\0\1\15\13\0\1\15"+
    "\2\0\25\15\1\71\5\15\2\0\1\15\13\0\1\15"+
    "\2\0\24\15\1\55\6\15\2\0\1\15\13\0\1\15"+
    "\2\0\21\15\1\75\11\15\2\0\1\15\13\0\1\15"+
    "\2\0\22\15\1\76\10\15\2\0\1\15\13\0\1\15"+
    "\2\0\26\15\1\55\4\15\2\0\1\15\13\0\1\15"+
    "\2\0\22\15\1\77\10\15\2\0\1\15\13\0\1\15"+
    "\2\0\11\15\1\100\14\15\1\101\4\15\2\0\1\15"+
    "\13\0\1\15\2\0\13\15\1\102\17\15\2\0\1\15"+
    "\13\0\1\15\2\0\23\15\1\71\7\15\2\0\1\15"+
    "\13\0\1\15\2\0\17\15\1\103\13\15\2\0\1\15"+
    "\13\0\1\15\2\0\20\15\1\104\12\15\2\0\1\15"+
    "\13\0\1\15\2\0\13\15\1\105\17\15\2\0\1\15"+
    "\13\0\1\15\2\0\6\15\1\106\24\15\2\0\1\15"+
    "\13\0\1\15\2\0\13\15\1\55\17\15\2\0\1\15"+
    "\13\0\1\15\2\0\7\15\1\107\23\15\2\0\1\15"+
    "\13\0\1\15\2\0\17\15\1\102\13\15\2\0\1\15"+
    "\13\0\1\15\2\0\25\15\1\110\5\15\2\0\1\15"+
    "\13\0\1\15\2\0\11\15\1\111\21\15\2\0\1\15"+
    "\13\0\1\15\2\0\23\15\1\55\7\15\2\0\1\15"+
    "\13\0\1\15\2\0\11\15\1\112\21\15\2\0\1\15"+
    "\13\0\1\15\2\0\22\15\1\113\10\15\2\0\1\15"+
    "\13\0\1\15\2\0\27\15\1\114\3\15\2\0\1\15"+
    "\13\0\1\15\2\0\21\15\1\55\11\15\2\0\1\15"+
    "\13\0\1\15\2\0\20\15\1\71\12\15\2\0\1\15"+
    "\13\0\1\15\2\0\13\15\1\115\17\15\2\0\1\15"+
    "\13\0\1\15\2\0\15\15\1\116\15\15\2\0\1\15"+
    "\13\0\1\15\2\0\20\15\1\117\12\15\2\0\1\15"+
    "\13\0\1\15\2\0\31\15\1\55\1\15\2\0\1\15"+
    "\13\0\1\15\2\0\26\15\1\120\4\15\2\0\1\15"+
    "\13\0\1\15\2\0\26\15\1\121\4\15\2\0\1\15"+
    "\13\0\1\15\2\0\13\15\1\122\17\15\2\0\1\15"+
    "\13\0\1\15\2\0\24\15\1\46\6\15\2\0\1\15"+
    "\13\0\1\15\2\0\24\15\1\102\6\15\2\0\1\15"+
    "\13\0\1\15\2\0\7\15\1\102\23\15\2\0\1\15"+
    "\13\0\1\15\2\0\13\15\1\53\17\15\2\0\1\15"+
    "\13\0\1\15\2\0\17\15\1\123\13\15\2\0\1\15"+
    "\13\0\1\15\2\0\7\15\1\124\23\15\2\0\1\15"+
    "\13\0\1\15\2\0\17\15\1\125\13\15\2\0\1\15"+
    "\13\0\1\15\2\0\12\15\1\126\20\15\2\0\1\15"+
    "\13\0\1\15\2\0\21\15\1\71\11\15\2\0\1\15"+
    "\13\0\1\15\2\0\21\15\1\57\11\15\2\0\1\15"+
    "\13\0\1\15\2\0\22\15\1\102\10\15\2\0\1\15"+
    "\13\0\1\15\2\0\27\15\1\127\3\15\2\0\1\15"+
    "\13\0\1\15\2\0\24\15\1\71\6\15\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3564];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\5\1\1\0\22\1\1\0"+
    "\25\1\1\11\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
 
 /* Código personalizado */
 
 // Se agregó una propiedad para verificar si existen tokens pendientes
 private boolean _existenTokens = false;
 
 public boolean existenTokens(){
 return this._existenTokens;
 }
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
   /* Código que se ejecutará en el constructor de la clase */
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
 
 /* Código a ejecutar al finalizar el análisis, en este caso cambiaremos el valor de una variable bandera */
 this._existenTokens = false;
 
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TokenInfo yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 9: break;
          case 2:
            { TokenInfo t = new TokenInfo(yytext(), TokenInfo.DELIMITADOR);
 this._existenTokens = true;
 return t;
            }
            // fall through
          case 10: break;
          case 3:
            { TokenInfo t = new TokenInfo(yytext(), TokenInfo.OPERADOR);
 this._existenTokens = true;
 return t;
            }
            // fall through
          case 11: break;
          case 4:
            { TokenInfo t = new TokenInfo(yytext(), TokenInfo.CONSTANTE);
 this._existenTokens = true;
 return t;
            }
            // fall through
          case 12: break;
          case 5:
            { TokenInfo t = new TokenInfo(yytext(), TokenInfo.IDENTIFICADOR);
 this._existenTokens = true;
 return t;
            }
            // fall through
          case 13: break;
          case 6:
            { TokenInfo t = new TokenInfo(yytext(), TokenInfo.COMENTARIO);
 this._existenTokens = true;
 return t;
            }
            // fall through
          case 14: break;
          case 7:
            { TokenInfo t = new TokenInfo(yytext(), TokenInfo.PALABRA_RESERVADA);
 this._existenTokens = true;
 return t;
            }
            // fall through
          case 15: break;
          case 8:
            { TokenInfo t = new TokenInfo(yytext(), TokenInfo.CADENA);
 this._existenTokens = true;
 return t;
            }
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
